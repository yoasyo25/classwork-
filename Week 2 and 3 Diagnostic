Week 2 and 3 Diagnostic 

This exercise is intended to help you assess your progress with the concepts and techniques we’ve covered during the week.

For these questions, write a short snippet of code that meets the requirement. In cases where the question mentions a “given” data value, use the variable given to refer to it (instead of re-writing the information).

Use single (`) and triple backticks (```) to container code snippets.

Define a class called PizzaOven which has a method cook_pizza which returns the string "mmm 'za".

''' 
class PizzaOven
  def cook_pizza
    puts "mmm 'za"
  end

end 
'''

Define a class called Student which is instantiated with a “name” value and which has a method name that returns this value

'''
  class Student
    attr_reader :name
    def initialize(name)
      @name = name 
    end
  end
'''

Given an array of the numbers [1,2,3,4,5], find the sum of the doubles of all the numbers
'''
array = [1,2,3,4,5]
doubles = array.each do |double|
          double * 2
          end 
summed = doubles.inject(:&, +)
'''

Give the command to create a new Git repository in a directory on your machine

git init 

Pizza

Given a hypothetical Pizza class which has an instance method is_tasty? that always returns true, write a simple Minitest test that tests this behavior.
'''
class PizzaTest < Minitest:: Test 
  def test_it_is_tasty
  pz = Pizza.new
  assert true, pz.is_tasty
  end 
end 
'''

Suppose the Pizza class also has a method style which randomly returns one of: "supreme", "mediterranean", or "cheese". Write a test that confirms that the returned pizza style is within this list.

'''
class PizzaTest < Minitest:: Test 
  def test_it_is_has_three_styles 
  pz = Pizza.new
  assert_equal "supreme" | "mediterranean" | "cheese", pz.style
  end 
end 
'''

Give the Git commands needed to stage and then commit a set of changes to a file

git status 
git add . 
git commit -m "message"
git push

Student

Define a Student class which, when created, has an attitude attribute. attitude should start out with the value “cheerful”, and the Student class should provide a “reader” method that allows us to access the value of its attitude.

'''
class Student
  attr_reader :attitude 
  def initialize(attitude=cheerful)
    @attitude = attitude 
  end 
end 

Additionally, add an assign_homework method to Student. When assigned_homework is invoked, if the student’s attitude is "cheerful", it should become "dubious". If the value is currently "dubious" it should become "perturbed". If the value is currently "perturbed", it should become "dazed". Assigning homework to a "dazed" student has no effect.
'''
  class Student
  attr_reader :attitude 
  def initialize(attitude=cheerful)
    @cheerful = cheerful
  end 
  
  def assign_homework
    if attitude == cheerful 
      return dubious
     end 
    if dubious 
      return perturbed
    end 
    if peturbed 
    return dazed
    end
  end      
end 
'''

Building on the Student class from the previous example, update the assign_homework method to accept an argument. The argument will be a String containing a short description of the assignment. For example we might use it like this:

'''
  def assign_homework(type_of_homework)
  end 
'''  
s = Student.new
s.assign_homework("Write a linked list")
Then, add an assignments method to Student. assignments should return a list of all the assignments that have been given, separated by a comma and a space. For example:
'''
  def assignments
    ###
  end 
'''
s = Student.new
s.attitude
=> "cheerful"
s.assign_homework("write a linked list")
s.attitude
=> "dubious"
s.assign_homework("write a BST")
s.attitude
=> "perturbed"
s.assignments
=> "write a linked list, write a BST"

Given an array of 3 Student instances, generate a new string of all of their assignments
For example:

s1 = Student.new
s2 = Student.new
s3 = Student.new

s1.assign_homework("linked list")
s1.assign_homework("sorting algos")

s2.assign_homework("write a c compiler")
s2.assign_homework("write a pacman game")

s3.assign_homework("headcount")
s3.assign_homework("sales engine")

students = [s1,s2,s3]

# YOUR CODE HERE

=> "linked list, sorting algos, write a c compiler, write a pacman game, headcount, sales engine"
What does the following code output?
def print_variables(x)
  puts "x: #{x}"
  puts "b: #{b}"
end

def b
  12
end

a = 4
print_variables(a)
    => x: 4
    => b: 12
    
Working with files: given a text file located at "~/Documents/pizza.txt", write code to read the file from the filesystem and print each line one at a time.

  file1 = ARGV
  file1.open
  file1.read_each_line
  file1.close 
  
Writing Files: given a text file located at "~/Documents/pizza.txt", write code to read the file from the filesystem, then write a new file at "~/Documents/line_count.txt" containing the number of lines in the original file.
'''
  file1, file2 = ARGV[0], ARGV[1]
  
  file1.open
  file1.read_each_line
  file1.close 
  
  File.open(file2, 'w')
  file2.write(file1)
  file2.close
 '''
  
Imagine a simple ruby class designed to represent a Corgi dog. Write a test for each of the following features:

A Corgi can be created with no arguments
''''
def_test_it_has_no_arguments_when_instantiated
c = Corgi.new
assert_instance_of Corgi, c.class
end 
'''
A Corgi can be assigned a name
'''
def_test_it_has_a_name
c = Corgi.new
assert_equal "Doggie", c.name
end 
'''
A Corgi can be asked for its name
'''
def_test_it_can_be_asked_for_its_name
c = Corgi.new
assert_equal "Doggie", c.what_is_name
end
'''
A Corgi can be asked for its posture, which should default to “standing”
def_test_it_has_a_posture
c = Corgi.new("standing")
assert_equal "standing", c.posture

A Corgi can be asked to lie down, which should change its posture to “laying”
def_test_it_has_another_posture
c = Corgi.new("laying")
assert_equal "laying", c.posture 
